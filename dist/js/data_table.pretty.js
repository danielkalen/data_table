// Generated by CoffeeScript 1.10.0
(function($) {
  var DataTable, defaultTableOptions, markup;
  markup = {
    table: "<div class='data_table-outerwrap'> <table class='data_table chart horizontal {{hasCheckbox}}'> <thead class='data_table-head'> <tr class='data_table-head-row'> <th class='data_table-head-row-cell checkbox'> <div class='data_table-head-row-cell-text'><input class='data_table-checkbox' type='checkbox'></div> </th> <th class='data_table-head-row-cell is_expand_button'></th> {{columns}} </tr> </thead> <tbody class='data_table-body'></tbody> </table> {{pagination}} </div>",
    table_head_cell: "<th class='data_table-head-row-cell {{isSortable}} {{slug}}' data-slug='{{slug}}' data-icon='{{icon}}'> <div class='data_table-head-row-cell-text'>{{label}}</div> </th>",
    table_body_row: "<tr class='data_table-body-row {{isSub}}' data-id='{{itemID}}'> <td class='data_table-body-row-cell checkbox'> <input class='data_table-checkbox' type='checkbox' data-id='{{itemID}}'> </td> <td class='data_table-body-row-cell is_expand_button'> <div class='data_table-body-row-cell-expand'></div> </td> {{cells}} </tr>",
    table_body_row_cell: "<td class='data_table-body-row-cell cell_{{slug}}' data-slug='{{slug}}'> <div class='data_table-body-row-cell-innerwrap'>{{value}}</div> </td>",
    table_body_row_cell_ip_details: "<div class='data_table-ip_details' data-ip={{ipAddress}}> <div class='data_table-ip_details-trigger'> <div class='data_table-ip_details-content'>Loading IP Details</div> </div> <div class='data_table-ip_details-country'></div> </div>",
    table_body_row_cell_ip_details_item: "<div class='data_table-ip_details-content-item'> <div class='data_table-ip_details-content-item-label'>{{label}}: </div> <div class='data_table-ip_details-content-item-value'>{{value}}</div> </div>",
    table_body_row_cell_fields: "<div class='data_table-fields'>{{fields}}</div>",
    table_body_row_cell_fields_item: "<div class='data_table-fields-item'> <div class='data_table-fields-item-label'>{{label}}: </div> <div class='data_table-fields-item-value'>{{value}}</div> </div>",
    table_body_row_cell_actions: "<div class='data_table-actions'>{{actions}}</div>",
    table_body_row_cell_actions_item: "<div class='data_table-actions-button color_{{color}}' data-action='{{action}}' data-icon='{{icon}}'> <div class='data_table-actions-button-text'>{{label}}</div> </div>",
    pagination: "<div class='data_table-pagination block-pagination'> <div class='data_table-pagination-item back'> <div class='data_table-pagination-item-text'></div> </div> {{pages}} <div class='data_table-pagination-item next'> <div class='data_table-pagination-item-text'></div> </div> </div>",
    pagination_item: "<div class='data_table-pagination-item'> <div class='data_table-pagination-item-text'>{{value}}</div> </div>"
  };
  defaultTableOptions = {
    'checkbox': true,
    'perPage': 20,
    'actions': false,
    'ipDataFetcher': function(ipAddress) {
      return new Promise(function(resolve) {
        return $.get("http://ipinfo.io/" + ipAddress, resolve, 'JSON');
      });
    }
  };
  DataTable = function(container, options) {
    this.container = container;
    this.options = options;
    this.tableOptions = $.extend({}, defaultTableOptions, this.options.table || {});
    this.data = [];
    this.els = {};
    this.els.tableOuterwrap = $(markup.table.replace('{{hasCheckbox}}', this.tableOptions.checkbox ? 'has_checkbox' : '').replace('{{columns}}', this.generateColumns()).replace('{{pagination}}', markup.pagination));
    this.els.table = this.els.tableOuterwrap.children().first();
    this.els.tableHead = this.els.table.children().first().children();
    this.els.tableBody = this.els.table.children().last();
    this.els.pagination = this.els.tableOuterwrap.children().last();
    this.els.tableOuterwrap.appendTo(this.container);
    this.els.table.data('DataTable', this);
    this.attachEvents().then((function(_this) {
      return function() {
        return _this.attachBindings().then(function() {
          return _this.fetchData();
        });
      };
    })(this));
    return this;
  };
  DataTable.prototype.fetchData = function() {
    return this.options.data().then((function(_this) {
      return function(response) {
        return _this.data = response;
      };
    })(this));
  };
  DataTable.prototype.generateColumns = function() {
    return this.options.columns.map(function(column) {
      return markup.table_head_cell.replace('{{isSortable}}', column.sorting ? 'is_sortable' : '').replace(/\{\{slug\}\}/g, column.label.toLowerCase().replace(/\W/g, '_')).replace('{{icon}}', column.icon || '').replace('{{label}}', column.label);
    }).join('');
  };
  DataTable.prototype.generateBodyRows = function(rows) {
    var genRow, i, j, len, len1, mainRow, row, rowItems, subRow, subRows;
    rowItems = '';
    genRow = (function(_this) {
      return function(row, parentRow, isSub) {
        return rowItems += markup.table_body_row.replace('{{isSub}}', isSub ? 'is_sub is_hidden' : '').replace(/\{\{itemID\}\}/g, isSub ? parentRow.ID : row.ID).replace('{{cells}}', function() {
          var cellValue, column, i, index, len, ref, rowCells;
          rowCells = '';
          ref = _this.options.columns;
          for (index = i = 0, len = ref.length; i < len; index = ++i) {
            column = ref[index];
            cellValue = row[column.label] || '';
            rowCells += markup.table_body_row_cell.replace(/\{\{slug\}\}/g, column.label.toLowerCase().replace(/\W/g, '_')).replace('{{value}}', function() {
              var name, ref1;
              switch (column.type) {
                case 'fields':
                  return _this.generateInlineFields(cellValue);
                case 'actions':
                  return _this.generateActions();
                case 'ip-details':
                  return _this.generateIpDetails(cellValue);
                default:
                  return ((ref1 = _this.options.formatters) != null ? typeof ref1[name = column.label] === "function" ? ref1[name](cellValue) : void 0 : void 0) || cellValue;
              }
            });
          }
          return rowCells;
        });
      };
    })(this);
    for (i = 0, len = rows.length; i < len; i++) {
      row = rows[i];
      mainRow = row.main || row;
      subRows = row.sub;
      if (subRows) {
        genRow(mainRow);
        for (j = 0, len1 = subRows.length; j < len1; j++) {
          subRow = subRows[j];
          genRow(subRow, mainRow, true);
        }
        this.els.table.addClass('is_expanding_table');
      } else {
        genRow(mainRow);
      }
    }
    return rowItems;
  };
  DataTable.prototype.generateInlineFields = function(dataFields) {
    return markup.table_body_row_cell_fields.replace('{{fields}}', function() {
      var key, output, value;
      if (typeof dataFields !== 'object') {
        return '';
      }
      output = (function() {
        var results;
        results = [];
        for (key in dataFields) {
          value = dataFields[key];
          results.push(markup.table_body_row_cell_fields_item.replace('{{label}}', key).replace('{{value}}', value));
        }
        return results;
      })();
      return output.join('');
    });
  };
  DataTable.prototype.generateActions = function() {
    return markup.table_body_row_cell_actions.replace('{{actions}}', (function(_this) {
      return function() {
        var action, output;
        if (!_this.tableOptions.actions) {
          return '';
        }
        output = (function() {
          var i, len, ref, results;
          ref = this.tableOptions.actions;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            action = ref[i];
            results.push(markup.table_body_row_cell_actions_item.replace('{{action}}', action.action).replace('{{label}}', action.label).replace('{{icon}}', action.icon).replace('{{color}}', action.color || 'grey'));
          }
          return results;
        }).call(_this);
        return output.join('');
      };
    })(this));
  };
  DataTable.prototype.generateIpDetails = function(ipAddress) {
    return markup.table_body_row_cell_ip_details.replace('{{ipAddress}}', ipAddress);
  };
  DataTable.prototype.attachEvents = function() {
    this.els.tableHead.on('click', 'th.is_sortable', (function(_this) {
      return function(event) {
        return _this.sortBy(event.currentTarget.dataset.slug);
      };
    })(this));
    this.els.tableBody.on('click', '.data_table-actions-button', (function(_this) {
      return function(event) {
        var $button, $itemRow, action, itemID, itemIndex;
        $button = $(event.currentTarget);
        $itemRow = $button.closest('tr');
        action = $button.data('action');
        itemID = $itemRow.data('id');
        itemIndex = $itemRow.index();
        return _this.els.table.trigger("action." + action, {
          itemID: itemID,
          'data': _this.data[itemIndex]
        });
      };
    })(this));
    this.els.tableBody.on('click', '.data_table-body-row-cell-expand', (function(_this) {
      return function(event) {
        var $button, $row, rowID;
        $button = $(event.currentTarget);
        $row = $button.closest('tr');
        rowID = $row.data('row-id');
        $row.siblings('.is_sub').filter(function() {
          return this.dataset.rowId === rowID;
        }).toggleClass('is_hidden');
        return $row.toggleClass('expanded');
      };
    })(this));
    SimplyBind('currentPage').of(this).to((function(_this) {
      return function() {
        var matchedPageEl$;
        matchedPageEl$ = _this.els.pagination.children().slice(1, -1).eq(_this.currentPage - 1);
        return matchedPageEl$.addClass('current').siblings().removeClass('current');
      };
    })(this));
    this.els.pagination.on('click', '.data_table-pagination-item', (function(_this) {
      return function(event) {
        var $this, isBack, isNext, pageNumber;
        $this = $(event.currentTarget);
        isBack = $this.hasClass('back');
        isNext = $this.hasClass('next');
        if (isBack) {
          if (_this.currentPage !== 1) {
            return _this.currentPage--;
          }
        } else if (isNext) {
          if (_this.currentPage !== _this.pageCount) {
            return _this.currentPage++;
          }
        } else {
          pageNumber = parseFloat($this.children().html());
          return _this.currentPage = pageNumber;
        }
      };
    })(this));
    this.els.tableBody.on('mouseover', '.data_table-ip_details-trigger', (function(_this) {
      return function(event) {
        var $content, $country, $trigger, ipAddress, isLoaded;
        $trigger = $(event.currentTarget);
        $content = $trigger.children();
        $country = $trigger.next();
        ipAddress = $trigger.parent().data('ip');
        isLoaded = $trigger.data('isLoaded');
        if (!isLoaded) {
          $trigger.data('isLoaded', !isLoaded);
          return _this.tableOptions.ipDataFetcher(ipAddress).then(function(ipDetails) {
            var key, output, value;
            if (!ipDetails) {
              return;
            }
            output = (function() {
              var results;
              results = [];
              for (key in ipDetails) {
                value = ipDetails[key];
                results.push(markup.table_body_row_cell_ip_details_item.replace('{{label}}', key).replace('{{value}}', value));
              }
              return results;
            })();
            $content.html(output.join(''));
            return $trigger.parent().addClass('ready');
          });
        }
      };
    })(this));
    return Promise.resolve();
  };
  DataTable.prototype.attachBindings = function() {
    SimplyBind.setOption('invokeOnBind', true);
    SimplyBind('data').of(this).to((function(_this) {
      return function(rows) {
        _this.pageCount = Math.ceil(rows.length / _this.tableOptions.perPage);
        if (_this.pageCount > 15) {
          _this.pageCount = 15;
        }
        return _this.currentPage = 1;
      };
    })(this)).and('prop:innerHTML').of(this.els.tableBody).transform((function(_this) {
      return function(rows) {
        return _this.generateBodyRows(rows);
      };
    })(this)).and((function(_this) {
      return function() {
        SimplyBind.setOption('updateEvenIfSame', true);
        _this.currentPage = 1;
        return SimplyBind.setOption('updateEvenIfSame', false);
      };
    })(this));
    SimplyBind('pageCount').of(this).to('prop:innerHTML.pages').of(this.els.pagination).transform(function(count) {
      var i, index, paginationItems, ref;
      paginationItems = '';
      for (index = i = 1, ref = count; 1 <= ref ? i <= ref : i >= ref; index = 1 <= ref ? ++i : --i) {
        if (index !== 0) {
          paginationItems += markup.pagination_item.replace('{{value}}', index);
        }
      }
      return paginationItems;
    });
    SimplyBind('currentPage').of(this).to((function(_this) {
      return function(currentPage) {
        var $rows, $rowsToHide, $rowsToReveal;
        $rows = _this.els.tableBody.children();
        $rowsToReveal = $rows.slice((currentPage - 1) * _this.tableOptions.perPage).slice(0, _this.tableOptions.perPage);
        $rowsToHide = $rows.not('.hidden');
        if ($rowsToHide.length === $rows.length) {
          $rowsToHide = $rows.slice(_this.tableOptions.perPage);
        }
        $rowsToHide.addClass('hidden');
        return $rowsToReveal.removeClass('hidden');
      };
    })(this));
    SimplyBind.setOption('invokeOnBind', false);
    return Promise.resolve();
  };
  DataTable.prototype.sortBy = function(column) {};
  return window.DataTable = DataTable;
})(jQuery);
